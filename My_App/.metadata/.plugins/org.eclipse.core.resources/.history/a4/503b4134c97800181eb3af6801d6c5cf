package canada.montreal.MVC.models;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.enterprise.inject.Model;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.transaction.UserTransaction;
import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import canada.montreal.dao.DepartmentDAO;
import canada.montreal.dto.Department;
import canada.montreal.entities.DepartmentEntity;


@Model
public class DepartmentModel {
	
	
	private final Logger logger = LoggerFactory.getLogger(getClass());
	private Map<String,String> inputErrors = new HashMap<>();
	private List<Department>departments;
    private String messageError;
	
	@PersistenceContext
    private EntityManager entityManager;
   
    @Resource
    private UserTransaction transaction;
    
    @Inject DepartmentDAO dao;
    
    @Inject
    private Validator validator;
    
    
	
	public void handle(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		
		logger.info("ENTER handle");
		
		
		final String name = request.getParameter("name");
		logger.info("Name: {}", name);
		
		final String id = request.getParameter("id");
		logger.info("ID: {}", id);
		
		
		if(id !=null & name !=null) {
			
		try{
			dao.findDTOByName(name);
			messageError = "Department name should be unique: Enter a different name";
		}catch(final NoResultException e) {

		
		DepartmentEntity departmentEntity = new DepartmentEntity();
		departmentEntity.setName(name);
		departmentEntity.setId(Long.parseLong(id));
		
		final Set<ConstraintViolation<DepartmentEntity>> issues = validator.validate(departmentEntity);
		
		
			try {
				transaction.begin();
				entityManager.persist(departmentEntity);
                transaction.commit();
            
			} catch (final Exception ex) {
				issues.forEach(issue -> {
	                final String attributesName = issue.getPropertyPath().toString();
	                final String errorMsg = issue.getMessage();
	                logger.info("Attribute Name: {}", attributesName);
	                logger.info("errorMsg: {}", errorMsg);

	                inputErrors.put(attributesName, errorMsg);
	            });
			}
		    }
		}
		logger.info("EXIT handle");
		
	
	}
	

	/**
	 * @return the departments
	 */
	public List<Department> getDepartments() {
		departments = dao.findAllDTO();
		return departments;
	}


	/**
	 * @return the inputErrors
	 */
	public Map<String, String> getInputErrors() {
		if(! inputErrors.isEmpty()) {
			return inputErrors;
		}else {
			return null;
		}
	}


	/**
	 * @return the messageError
	 */
	public String getMessageError() {
		if(messageError !=null) {
			return messageError;
		}else {
			return null;
		}
	}

		

}
