package canada.montreal.MVC.models;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import javax.annotation.Resource;
import javax.enterprise.inject.Model;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.transaction.UserTransaction;
import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import canada.montreal.dao.DepartmentDAO;
import canada.montreal.dao.EmployeeDAO;
import canada.montreal.dto.Department;
import canada.montreal.dto.Employee;
import canada.montreal.entities.DepartmentEntity;
import canada.montreal.entities.EmployeeEntity;


@Model
public class EmployeeModel {
	
	
	private final Logger logger = LoggerFactory.getLogger(getClass());
	private List<Employee>employees;
	private EmployeeEntity employee;
	private UUID oid;
	private Map<String, String> inputErrors = new HashMap<>();
	
    @PersistenceContext
    private EntityManager entityManager;
   
    @Resource
    private UserTransaction transaction;
    
    
    @Inject DepartmentDAO departmentDao;
    @Inject EmployeeDAO employeeDao;
    @Inject
    private Validator validator;
	
	public void handle(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		logger.info("ENTER EmployeeModel.handle");
		
		try {
		oid = UUID.fromString(request.getRequestURI().substring(request.getContextPath().length()).split("\\;")[0].split("/")[2]); 
		logger.info("oid: {}", oid);
		}catch (final Exception ex){
			
		}
		
		
		final String firstName = request.getParameter("firstName");
		logger.info("FirstName: {}", firstName);
		
		final String lastName = request.getParameter("lastName");
		logger.info("lastName: {}", lastName);
		
		
		final String departmentName = request.getParameter("department");
		logger.info("department: {}", departmentName);
		
		EmployeeEntity employeeEntity = new EmployeeEntity();
		
		final Set<ConstraintViolation<EmployeeEntity>> issues = validator.validate(employeeEntity);
		
		try {
		final String salaryTmp = request.getParameter("salary");
		int salary  = Integer.parseInt(salaryTmp);
		employeeEntity.setSalary(salary);
		}catch(final Exception ex) {
			inputErrors.put("salary", " invalid Empty number");
		}
		

		employeeEntity.setFirstName(firstName);
		employeeEntity.setLastName(lastName);
		
		
		Department departmentDTO = new Department();
		
		if(departmentName !=null) {
		departmentDTO = departmentDao.findDTOByName(departmentName);
	     }
		DepartmentEntity department = new DepartmentEntity();
		department.setOid(departmentDTO.getOid());
		department.setName(departmentDTO.getName());
		department.setId(departmentDTO.getId());
		
		
		employeeEntity.setDepartment(department);
		
		
			try {
				transaction.begin();
				entityManager.persist(employeeEntity);
				transaction.commit();
			} catch (final Exception ex) {
				issues.forEach(issue -> {
	                final String attributesName = issue.getPropertyPath().toString();
	                final String errorMsg = issue.getMessage();
	                logger.info("Attribute Name: {}", attributesName);
	                logger.info("errorMsg: {}", errorMsg);

	                inputErrors.put(attributesName, errorMsg);
	            });
			}
		
		

		logger.info("EmployeeModel.EXIT handle");
		
	
	}

	/**
	 * @return the employees
	 */
	public List<Employee> getEmployees() {
		employees = employeeDao.findAllDTO();
		return employees;
	}
	
	
	

	/**
	 * @return the oid
	 */
	public UUID getOid() {
		return oid;
	}

	/**
	 * @return the employee
	 */
	public EmployeeEntity getEmployee() {
		
		if(getOid() !=null) {
		employee = employeeDao.findDTOByOid(getOid());
	     }
		return employee;
	}

	/**
	 * @return the inputErrors
	 */
	public Map<String, String> getInputErrors() {
		if(! inputErrors.isEmpty()) {
		return inputErrors;
	}else {
		return null;
	}

	}
}
